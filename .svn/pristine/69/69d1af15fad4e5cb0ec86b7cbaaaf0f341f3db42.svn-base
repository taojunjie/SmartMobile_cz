package com.android.smartmobile.cz.listener;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.xmlpull.v1.XmlPullParserException;

import android.app.ProgressDialog;
import android.content.Context;
import android.os.AsyncTask;
import android.view.Gravity;
import android.view.View;
import android.widget.LinearLayout;

import com.android.smartmobile.cz.bean.AddressBean;
import com.android.smartmobile.cz.bean.SubLayer;
import com.android.smartmobile.cz.bean.TitleBean;
import com.android.smartmobile.cz.db.SDBHelper;
import com.android.smartmobile.cz.finals.Constants;
import com.android.smartmobile.cz.model.MyApplication;
import com.android.smartmobile.cz.service.PullParseConfigMapService;
import com.android.smartmobile.cz.util.LogUtil;
import com.android.smartmobile.cz.util.MapHelper;
import com.android.smartmobile.cz.util.ToastUtil;
import com.android.smartmobile.cz.view.pop.PopRightTitleManager;
import com.esri.android.map.GraphicsLayer;
import com.esri.android.map.MapView;
import com.esri.android.map.event.OnLongPressListener;
import com.esri.core.geometry.Point;
import com.esri.core.map.Graphic;

public class LooLongPressListener implements OnLongPressListener {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private GraphicsLayer rimGraphicsLayer;
	private MapView mapView;
	private MapHelper mapHelper;
	private Context mContext;
	private List<SubLayer> subLayers;
	private SDBHelper sdbHelper;
	private List<TitleBean> titleBeans;
	private PopRightTitleManager popRightTitleManager;
	private LinearLayout ll_main_right_title;

	public LooLongPressListener(MapView mapView, Context mContext,
			GraphicsLayer rimGraphicsLayer, LinearLayout ll_main_right_title) {
		// TODO Auto-generated constructor stub
		this.mapView = mapView;
		this.mContext = mContext;
		this.rimGraphicsLayer = rimGraphicsLayer;
		this.ll_main_right_title = ll_main_right_title;
		initData();
	}

	void initData() {
		mapHelper = new MapHelper(mapView, mContext);
		titleBeans = new ArrayList<TitleBean>();
		popRightTitleManager = new PopRightTitleManager(mContext, mapView,
				ll_main_right_title);
		subLayers = new ArrayList<SubLayer>();
		List<SubLayer> resultLayers = MyApplication.mApp.subLayers;
		if (resultLayers == null || resultLayers.size() == 0)
			return;
		for (int i = 0; i < resultLayers.size(); i++) {
			if (resultLayers.get(i).getCanQuery().equalsIgnoreCase("YES")) {
				subLayers.add(resultLayers.get(i));
			}
		}

	}

	@Override
	public void onLongPress(float x, float y) {
		// TODO Auto-generated method stub
		Point screenPoint = mapView.toMapPoint(x, y);

		if (MyApplication.mApp.singleHighlightGraphicsLayer != null) {
			MyApplication.mApp.singleHighlightGraphicsLayer.removeAll();
		}
		// String sql =
		// "SELECT PK_UID ID,项目名称 NAME,用地性质 SUBNAME,ST_AsText(Geometry) GEOMETRY from PGIS_ydxkz t where where ST_Intersects(t.Geometry,ST_Buffer(ST_GeometryFromText('POINT(507456.215904 3513251.910686)',2437),100))=1";

		// mapHelper.DrawCircle(mapView, screenPoint, 100, 25,
		// Color.YELLOW);

		new getRimAsyncTask().execute(screenPoint);

	}

	class getRimAsyncTask extends AsyncTask<Point, Void, List<TitleBean>> {
		ProgressDialog pdialog;

		@Override
		protected List<TitleBean> doInBackground(Point... params) {
			// TODO Auto-generated method stub
			// getRimData(params[0]);
			return getRimData(params[0]);
		}

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
			pdialog = new ProgressDialog(mContext);
			pdialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
			pdialog.setMessage("正在查询...");
			pdialog.show();
		}

		@Override
		protected void onPostExecute(List<TitleBean> result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			Constants.HANDLER_MAIN
					.sendEmptyMessage(Constants.WHAT_REFRESH_SCALE_LEVER);
			if (result != null && result.size() != 0) {

				Point cenPoint = null;
				Graphic graphic = null;
				for (int i = 0; i < result.size(); i++) {
					// String centerPoint = result.get(i).getCentroid();
					// String string = centerPoint.replaceFirst("POINT", "")
					// .replaceAll("\\(", "").replaceAll("\\)", "");
					// String[] pointStringArray = string.split(" ");
					// cenPoint = new Point(
					// StringUtil.String2Double(pointStringArray[0]),
					// StringUtil.String2Double(pointStringArray[1]));
					//
					// graphic = new Graphic(cenPoint,
					// new SymbolUtil(mContext)
					// .getPolygonCenterPointSymbol());

					// mapHelper.flashPolygonToGraphicsLayer(result.get(i),
					// rimGraphicsLayer, false);
				}

				if (result.size() > 0) {

					ll_main_right_title.setVisibility(View.VISIBLE);
					popRightTitleManager.init(result);
				}

			} else {
				ToastUtil.makeToastInBottom("没有匹配的数据");
			}

			if (pdialog.isShowing()) {
				pdialog.dismiss();
			}

		}

	}

	private List<TitleBean> getRimData(Point point) {
		sdbHelper = new SDBHelper();
		TitleBean tlBean = null;
		titleBeans.clear();
		if (subLayers == null || subLayers.size() == 0)
			return null;
		for (int i = 0; i < subLayers.size(); i++) {
			try {
				List<AddressBean> list = sdbHelper.getResultBySql(
						toSql(subLayers.get(i), point), subLayers.get(i)
								.getTableName(), subLayers.get(i).getName());
				if (list.size() > 0) {
					tlBean = new TitleBean();
					tlBean.setName(subLayers.get(i).getName());
					tlBean.setGroupLayers(list);
					tlBean.setGeoType(subLayers.get(i).getGeoType());
					titleBeans.add(tlBean);
				}

			} catch (jsqlite.Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return null;
			}
		}
		return titleBeans;
	}

	/**
	 * 组合sql语句
	 * 
	 * @param subLayer
	 * @return
	 */
	public String toSql(SubLayer subLayer, Point point) {

		// mapHelper.getPolygonGeometry(x, y, 100);

		return "SELECT PK_UID ID,"
				+ subLayer.getTitleField()
				+ " NAME,"
				+ subLayer.getSubTitleField()
				+ " SUBNAME,ST_AsText(Geometry) GEOMETRY ,ST_AsText(ST_Centroid(Geometry)) CENTROID from "
				+ subLayer.getTableName()
				+ " t WHERE ST_Intersects(t.Geometry,"
				+ mapHelper.getPolygonGeometry(point.getX(), point.getY(),
						mapHelper.getScaleBean(mapView.getScale()).getBuffer())
				+ ")=1 AND ST_Intersects(t.Geometry,ST_Buffer(ST_GeometryFromText('POINT("
				+ point.getX() + " " + point.getY() + ")',2437),"
				+ mapHelper.getScaleBean(mapView.getScale()).getBuffer()
				+ "))=1";
	}

}
