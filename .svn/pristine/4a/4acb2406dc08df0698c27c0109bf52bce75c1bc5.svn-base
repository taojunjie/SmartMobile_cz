package com.android.smartmobile.cz.map;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;

import android.util.Log;

import com.android.smartmobile.cz.bean.Layer;
import com.android.smartmobile.cz.finals.Constants;
import com.android.smartmobile.cz.util.LogUtil;
import com.android.smartmobile.cz.util.StringUtil;
import com.esri.android.map.TiledServiceLayer;
import com.esri.core.geometry.Envelope;
import com.esri.core.geometry.Point;
import com.esri.core.geometry.SpatialReference;

public class OfflineCacheTiledServiceLayer extends TiledServiceLayer {

	private SpatialReference spatialReference; // 空间参考
	private Layer layer;
	// private Envelope fullExtent = new Envelope(38271382.590048,
	// 3958604.25302,
	// 38524317.872452, 4118706.90518);// 全服范围
	// private Envelope initExtent = new Envelope(38271382.590048,
	// 3958604.25302,
	// 38524317.872452, 4118706.90518);// 初始范围

	private Envelope fullExtent;
	private Envelope initExtent;

	private TileInfo tileInfo; // TiledServiceLayer.TileInfo

	private String layerurl = ""; // Url
	private String cachepath;// 本地存储路径

	public OfflineCacheTiledServiceLayer(String cachepath, Layer layer) {
		super(layer.getLevel().getUrl());
		// TODO Auto-generated constructor stub
		this.layerurl = layer.getLevel().getUrl();
		this.cachepath = cachepath + "/" + layer.getName();
		this.layer = layer;
		initTileInfo();
		OfflineCacheTiledServiceLayer.this.initLayer();
	}

	private void initTileInfo() {

		fullExtent = new Envelope(StringUtil.String2Double(layer
				.getFullExtent().getXmin()), StringUtil.String2Double(layer
				.getFullExtent().getYmin()), StringUtil.String2Double(layer
				.getFullExtent().getXmax()), StringUtil.String2Double(layer
				.getFullExtent().getYmax()));// 全服范围

		initExtent = new Envelope(StringUtil.String2Double(layer
				.getInitialExtent().getXmin()), StringUtil.String2Double(layer
				.getInitialExtent().getYmin()), StringUtil.String2Double(layer
				.getInitialExtent().getXmax()), StringUtil.String2Double(layer
				.getInitialExtent().getYmax()));// 初始范围

		spatialReference = SpatialReference.create(StringUtil.String2Int(layer
				.getInitialExtent().getSpatialReference())); // 空间参考

		/* 原点坐标 */
		Point localPoint = new Point(StringUtil.String2Double(layer
				.getOriginPoint().getX()), StringUtil.String2Double(layer
				.getOriginPoint().getY()));
		/* 地图分辨率 */
		double[] arrayOfDoubleres = StringUtil.Strings2Doubles(StringUtil
				.split(layer.getResolution()));
		/* 地图比例尺 */
		double[] arrayOfDoublescale = StringUtil.Strings2Doubles(StringUtil
				.split(layer.getScale()));
		int k = arrayOfDoublescale.length;
		int dpi = StringUtil.String2Int(layer.getImage().getDpi());
		int tileHeight = StringUtil.String2Int(layer.getImage().getWidth());
		// 图片高度
		int tileWidth = StringUtil.String2Int(layer.getImage().getWidth());
		// 图片宽度
		tileInfo = new TileInfo(localPoint, arrayOfDoublescale,
				arrayOfDoubleres, k, dpi, tileWidth, tileHeight);
	}

	@Override
	protected void initLayer() {
		// TODO Auto-generated method stub
		// if (getID() == 0) {
		// this.nativeHandle = create();
		// }
		setFullExtent(fullExtent);// 设置全服地图范围
		setTileInfo(tileInfo);// 设置tileInfo
		setInitialExtent(initExtent);// 设置初始化地图范围
		setDefaultSpatialReference(spatialReference);// 设置空间参考
		super.initLayer();
	}

	@Override
	public TileInfo getTileInfo() {
		// TODO Auto-generated method stub
		return this.tileInfo;
	}

	@Override
	public Envelope getFullExtent() {
		// TODO Auto-generated method stub
		return this.fullExtent;
	}

	@Override
	public SpatialReference getSpatialReference() {
		// TODO Auto-generated method stub
		return this.spatialReference;
	}

	@Override
	protected byte[] getTile(int level, int col, int row) throws Exception {
		// TODO Auto-generated method stub

		byte[] bytes = getOfflineCacheFile(level, col, row);
		if (bytes == null) {
			bytes = getOnlineCacheFile(level, col, row);
			Log.e("test", bytes.toString());
			AddOfflineCacheFile(level, col, row, bytes);
		}

		return bytes;
	}

	// 将图片保存到本地 目录结构可以随便定义 只要你找得到对应的图片
	private byte[] AddOfflineCacheFile(int level, int col, int row, byte[] bytes) {
		File file = new File(cachepath);
		if (!file.exists()) {
			file.mkdirs();
		}
		File levelfile = new File(cachepath + "/" + level);
		if (!levelfile.exists()) {
			levelfile.mkdirs();
		}
		File colfile = new File(cachepath + "/" + level + "/" + col);
		if (!colfile.exists()) {
			colfile.mkdirs();
		}
		File rowfile = new File(cachepath + "/" + level + "/" + col + "/" + row
				+ "." + layer.getImage().getFormat());
		FileOutputStream out = null;
		if (!rowfile.exists()) {
			try {
				out = new FileOutputStream(rowfile);
				out.write(bytes);

				LogUtil.LooLog().d(rowfile.getPath() + "下载到本地成功！");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} finally {
				if (out != null) {
					try {
						out.flush();
						out.close();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

				}
			}
		}
		return bytes;

	}

	// 从网络获取
	private byte[] getOnlineCacheFile(int level, int col, int row)
			throws IOException {
		byte[] data = null;
		HttpURLConnection conn = null;
		String localPath = null;

		localPath = String.format(layerurl, level, row, col);
		InputStream inputStream = null;
		try {
			URL url = new URL(localPath);
			conn = (HttpURLConnection) url.openConnection();
			conn.setDoInput(true);
			conn.setUseCaches(true);
			if (conn.getResponseCode() == 200) {
				inputStream = conn.getInputStream();
				data = readInputStream(inputStream);
				inputStream.close();
				LogUtil.LooLog().d(localPath + "远程加载成功");
			} else {
				System.out.println("发生异常！");
			}
			conn.disconnect();

		} catch (MalformedURLException e) {
			e.printStackTrace();
			Log.i("MapServiceLayer", e.getMessage());
		}

		return data;
	}

	// 读取
	public byte[] readInputStream(InputStream is) {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		byte[] buffer = new byte[1024];
		int length = -1;
		byte[] data = null;
		try {
			while ((length = is.read(buffer)) != -1) {
				baos.write(buffer, 0, length);
			}
			data = baos.toByteArray();

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (baos != null) {
				try {
					///is.close();
					baos.flush();
					baos.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
		}
		return data;
	}

	// 从本地获取图片
	private byte[] getOfflineCacheFile(int level, int col, int row) {
		byte[] bytes = null;
		File rowfile = new File(cachepath + "/" + level + "/" + col + "/" + row
				+ "." + layer.getImage().getFormat());

		if (rowfile.exists()) {
			try {
				bytes = CopySdcardbytes(rowfile);
				if (bytes != null || bytes.length > 0) {
					LogUtil.LooLog().d(rowfile.getAbsoluteFile() + "本地读取成功");
				}

			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else {
			bytes = null;
		}
		return bytes;
	}

	// 读取本地图片流
	public byte[] CopySdcardbytes(File file) throws IOException {  
		FileInputStream in = new FileInputStream(file);

		ByteArrayOutputStream out = new ByteArrayOutputStream(1024);

		byte[] temp = new byte[1024];

		int size = 0;

		while ((size = in.read(temp)) != -1) {
			out.write(temp, 0, size);
		}
		
		byte[] bytes = out.toByteArray();
		
		if (in!=null) {
			in.close();
		}
		if (out != null) {
			out.flush();
			out.close();
		}

		return bytes;
	}

}
