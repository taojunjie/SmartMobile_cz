/**
 * 
 */
package com.android.smartmobile.cz.view.pop;

import java.io.File;
import java.io.IOException;
import java.util.List;

import org.xmlpull.v1.XmlPullParserException;

import com.android.smartmobile.cz.R;
import com.android.smartmobile.cz.adapter.ExAdapter;
import com.android.smartmobile.cz.bean.Catalog;
import com.android.smartmobile.cz.bean.Layer;
import com.android.smartmobile.cz.finals.Constants;
import com.android.smartmobile.cz.interf.InitActivity;
import com.android.smartmobile.cz.model.MyApplication;
import com.android.smartmobile.cz.service.PullParseConfigMapService;
import com.android.smartmobile.cz.service.PullParseConfigService;
import com.android.smartmobile.cz.util.LogUtil;
import com.android.smartmobile.cz.util.MapHelper;
import com.android.smartmobile.cz.util.ToastUtil;
import com.android.smartmobile.cz.view.MainMapView;
import com.esri.android.map.MapView;
import com.esri.android.map.ags.ArcGISDynamicMapServiceLayer;
import com.esri.android.map.ags.ArcGISTiledMapServiceLayer;
import com.smartmobile.sdk.map.LayerParam;

import android.content.Context;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.PaintDrawable;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.View.OnKeyListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.AbsListView;
import android.widget.Button;
import android.widget.ExpandableListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.ExpandableListView.OnGroupClickListener;
import android.widget.ExpandableListView.OnGroupExpandListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.ExpandableListView.OnChildClickListener;
import android.widget.SeekBar;
import android.widget.Switch;

/**
 * 
 * @ClassName: PopLayer
 * @Description:
 * @author Administrator
 * @date 2013年8月3日 下午12:59:17
 * @Company: www.shdci.com
 * @Copyright: Copyright (c) 2013 All rights reserved.
 * @version
 */
public class PopLayerManager implements InitActivity, OnClickListener {
	private Context mContext;
	private Button btn_pop_basemap_terrain, btn_pop_basemap_vector,
			btn_pop_basemap_img;
	private ImageView img_basemap_is_select_vector, img_basemap_is_select_img,
			img_basemap_is_select_terrain;
	private MapView mainMapView = null;
	// 声明PopupWindow对象的引用
	private PopupWindow popupWindow = null;
	private List<Catalog> catalogs = null;
	private ExpandableListView expandableListView;
	private ExAdapter exAdapter;
	public void setPopupWindow(PopupWindow popupWindow) {
		this.popupWindow = popupWindow;
	}

	/**
	 * 
	 * @param context
	 * @param mainMapView
	 */
	public PopLayerManager(Context context, MapView mainMapView) {
		// TODO Auto-generated constructor stub
		this.mContext = context;
		this.mainMapView = mainMapView;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.android.smartmobile.cz.interf.InitActivity#initData()
	 */
	@Override
	public void initData() {
		// TODO Auto-generated method stub
		if (Constants.catalogs == null) {
			try {
				catalogs = PullParseConfigMapService.getCatalogs();
				Constants.catalogs = catalogs;
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else {
			catalogs = Constants.catalogs;
		}

	}

	/***
	 * 获取PopupWindow实例
	 */
	public PopupWindow getPopupWindow() {
		return popupWindow;
	}

	/**
	 * 创建PopupWindow
	 */
	@Override
	public void initView() {
		initData();
		// TODO Auto-generated method stub
		// 获取自定义布局文件pop.xml的视图
		View popupWindow_view = LayoutInflater.from(mContext).inflate(
				R.layout.pop_layer, null, false);
		// 创建PopupWindow实例,200,150分别是宽度和高度
		popupWindow = new PopupWindow(popupWindow_view, 350, 600);
		MyApplication.mApp.popupWindows.add(popupWindow);
		// 设置动画效果
		// popupWindow.setAnimationStyle(R.style.AnimationFade);
		popupWindow.setBackgroundDrawable(new BitmapDrawable());
		popupWindow.setOutsideTouchable(true);
		popupWindow.setFocusable(true);
		popupWindow.setTouchable(true);
		popupWindow.update();
		// 点击其他地方消失
		popupWindow_view.setOnTouchListener(new OnTouchListener() {
			@Override
			public boolean onTouch(View v, MotionEvent event) {
				if (event.getAction() == MotionEvent.ACTION_UP) {
					popupWindow.setFocusable(false);
					popupWindow.setOutsideTouchable(false);
				} else {
					popupWindow.setFocusable(true);
				}
				popupWindow.update();
				return false;
			}

		});
		// pop.xml视图里面的控件
		LinearLayout ll_pop_basemap_type = (LinearLayout) popupWindow_view
				.findViewById(R.id.ll_pop_basemap_type);

		// pop.xml视图里面的控件
		btn_pop_basemap_terrain = (Button) popupWindow_view
				.findViewById(R.id.btn_pop_basemap_terrain);
		btn_pop_basemap_vector = (Button) popupWindow_view
				.findViewById(R.id.btn_pop_basemap_vector);
		btn_pop_basemap_img = (Button) popupWindow_view
				.findViewById(R.id.btn_pop_basemap_img);

		img_basemap_is_select_vector = (ImageView) popupWindow_view
				.findViewById(R.id.img_basemap_is_select_vector);
		img_basemap_is_select_img = (ImageView) popupWindow_view
				.findViewById(R.id.img_basemap_is_select_img);
		img_basemap_is_select_terrain = (ImageView) popupWindow_view
				.findViewById(R.id.img_basemap_is_select_terrain);

		btn_pop_basemap_img.setOnClickListener(this);
		btn_pop_basemap_terrain.setOnClickListener(this);
		btn_pop_basemap_vector.setOnClickListener(this);

		expandableListView = (ExpandableListView) popupWindow_view
				.findViewById(R.id.ex_pop_map_type);
		expandableListView.setGroupIndicator(null);// 取消默认的ExpandableListview的默认指示的图标;;;
		exAdapter=new ExAdapter(mContext, catalogs,
				mainMapView);
		expandableListView.setAdapter(exAdapter);
		// 将所有项设置成默认展开

		expandableListView.setDivider(null);

		int groupCount = expandableListView.getCount();

		for (int i = 0; i < groupCount; i++) {

			expandableListView.expandGroup(i);

		}

		expandableListView.setOnGroupClickListener(new OnGroupClickListener() {

			@Override
			public boolean onGroupClick(ExpandableListView parent, View v,
					int groupPosition, long id) {
				// TODO Auto-generated method stub

				String name = catalogs.get(groupPosition).getName();
				// ToastUtil.makeToastInCenter(name);
				return false;
			}
		});
		expandableListView.setOnChildClickListener(new OnChildClickListener() {

			@Override
			public boolean onChildClick(ExpandableListView parent, View v,
					int groupPosition, int childPosition, long id) {
				// TODO Auto-generated method stub

				String name = catalogs.get(groupPosition).getGroupLayers()
						.get(childPosition).getAliasName();
				// ToastUtil.makeToastInCenter(name);

				final LinearLayout ll_child_tool = (LinearLayout) v
						.findViewById(R.id.ll_child_tool);
				if (ll_child_tool.getVisibility() == View.VISIBLE) {
					ll_child_tool.setVisibility(View.GONE);
				} else {
					ll_child_tool.setVisibility(View.VISIBLE);
				}

				return true;
			}
		});
		if (Constants.MapType == 0) {
			return;
		}else {
			initMapTypeView(Constants.MapType);
		}
	

	}

	void initMapTypeView(int index) {
		

		switch (index) {
		case 0:
			img_basemap_is_select_vector.setVisibility(View.VISIBLE);
			img_basemap_is_select_img.setVisibility(View.INVISIBLE);
			img_basemap_is_select_terrain.setVisibility(View.INVISIBLE);

			// com.esri.android.map.Layer layer = MapHelper.getLayerByName(
			// mainMapView, "规划道路");
			// if (layer != null) {
			// mainMapView.removeLayer(layer);
			// }
			mainMapView.removeAll();
			MapHelper.AddMapLayer(mainMapView, "基础矢量");
			break;
		case 1:
			img_basemap_is_select_vector.setVisibility(View.INVISIBLE);
			img_basemap_is_select_img.setVisibility(View.VISIBLE);
			img_basemap_is_select_terrain.setVisibility(View.INVISIBLE);

			// com.esri.android.map.Layer layer1 = MapHelper.getLayerByName(
			// mainMapView, "基础矢量");
			// if (layer1 != null) {
			// mainMapView.removeLayer(layer1);
			// }

			mainMapView.removeAll();

			String file = Constants.TPKCachePath + "/规划道路.tpk";
			if (new File(file).exists()) {
				MapHelper.AddLocalMapLayer(mainMapView, "规划道路");
				ToastUtil.makeToastInBottom("tpk模式：" + file);
			} else {
				MapHelper.AddMapLayer(mainMapView, "规划道路");
				ToastUtil.makeToastInBottom("在线模式：规划道路");
			}
			break;
		case 2:
			img_basemap_is_select_vector.setVisibility(View.INVISIBLE);
			img_basemap_is_select_img.setVisibility(View.INVISIBLE);
			img_basemap_is_select_terrain.setVisibility(View.VISIBLE);
			break;

		default:
			break;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.android.smartmobile.cz.interf.InitActivity#clearView()
	 */
	@Override
	public void clearView() {
		// TODO Auto-generated method stub

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.view.View.OnClickListener#onClick(android.view.View)
	 */
	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.btn_pop_basemap_vector:
			if (Constants.MapType == 0) {
				return;
			} else {
				Constants.MapType = 0;
				initMapTypeView(Constants.MapType);
			}
			try {
				catalogs = PullParseConfigMapService.getCatalogs();
				Constants.catalogs = catalogs;
				exAdapter.notifyDataSetChanged();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			break;

		case R.id.btn_pop_basemap_img:
			if (Constants.MapType == 1) {
				return;
			} else {
				Constants.MapType = 1;
				initMapTypeView(Constants.MapType);
			}
			try {
				catalogs = PullParseConfigMapService.getCatalogs();
				Constants.catalogs = catalogs;
				exAdapter.notifyDataSetChanged();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			break;

		case R.id.btn_pop_basemap_terrain:
			if (Constants.MapType == 2) {
				return;
			} else {
				Constants.MapType = 2;
				initMapTypeView(Constants.MapType);
			}
			break;

		default:
			break;
		}
	}

	// 设置pop焦点
	void setPopFocusable() {

		expandableListView.setOnScrollListener(new OnScrollListener() {
			@Override
			public void onScrollStateChanged(AbsListView view, int scrollState) {
				switch (scrollState) {
				case OnScrollListener.SCROLL_STATE_IDLE:
					popupWindow.setFocusable(false);
					popupWindow.setOutsideTouchable(false);
					popupWindow.update();
					break;
				case OnScrollListener.SCROLL_STATE_TOUCH_SCROLL:
					popupWindow.setFocusable(true);
					popupWindow.update();
					break;
				case OnScrollListener.SCROLL_STATE_FLING:
					popupWindow.setFocusable(false);
					popupWindow.setOutsideTouchable(false);
					popupWindow.update();
					break;
				default:
					popupWindow.setFocusable(true);
					popupWindow.update();
					break;
				}
			}

			@Override
			public void onScroll(AbsListView view, int firstVisibleItem,
					int visibleItemCount, int totalItemCount) {
				popupWindow.update();
			}
		});

		expandableListView
				.setOnFocusChangeListener(new OnFocusChangeListener() {
					@Override
					public void onFocusChange(View v, boolean hasFocus) {
						if (hasFocus) {
							popupWindow.setFocusable(true);
							popupWindow.update();
						} else {
							popupWindow.setFocusable(false);
							popupWindow.setOutsideTouchable(false);
							popupWindow.update();
						}
					}
				});

	}

}
