/**
 * 
 */
package com.android.smartmobile.cz.view;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import com.android.smartmobile.cz.R;
import com.android.smartmobile.cz.adapter.ExListTypeAdapter;
import com.android.smartmobile.cz.adapter.ResultListAdapter;
import com.android.smartmobile.cz.bean.AddressBean;
import com.android.smartmobile.cz.bean.Catalog;
import com.android.smartmobile.cz.bean.SubLayer;
import com.android.smartmobile.cz.db.SDBHelper;
import com.android.smartmobile.cz.finals.Constants;
import com.android.smartmobile.cz.interf.InitActivity;
import com.android.smartmobile.cz.model.BaseActivity;
import com.android.smartmobile.cz.service.PullParseConfigMapService;
import com.android.smartmobile.cz.thread.AsyncQueryTask;
import com.android.smartmobile.cz.util.LogUtil;
import com.android.smartmobile.cz.util.StringUtil;
import com.android.smartmobile.cz.util.SymbolUtil;
import com.android.smartmobile.cz.util.ToastUtil;
import com.android.smartmobile.cz.view.pop.PopGestureManager;
import com.esri.android.map.Callout;
import com.esri.android.map.CalloutStyle;
import com.esri.android.map.GraphicsLayer;
import com.esri.android.map.MapView;
import com.esri.core.geometry.Point;
import com.esri.core.geometry.Polygon;
import com.esri.core.map.Graphic;
import com.esri.core.symbol.MarkerSymbol;
import com.esri.core.symbol.PictureMarkerSymbol;
import com.esri.core.symbol.SimpleFillSymbol;
import com.esri.core.symbol.SimpleLineSymbol;
import com.smartmobile.sdk.graphics.PlottingTouchlistener;
import android.annotation.SuppressLint;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.BitmapDrawable;
import android.os.AsyncTask;
import android.os.Handler;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ExpandableListView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.ExpandableListView.OnChildClickListener;
import android.widget.RelativeLayout;
import android.widget.Spinner;

/**
 * 
 * @ClassName: PopListManager
 * @Description:
 * @author Administrator
 * @date 2013年8月3日 下午19:52:17
 * @Company: www.shdci.com
 * @Copyright: Copyright (c) 2013 All rights reserved.
 * @version
 */
public class MainLeftListView implements InitActivity, OnClickListener {
	private Context mContext;
	private MapView mainMapView = null;
	private EditText edit_search;
	private Button btn_list_type, btn_list_close, btn_buttom_more;
	private ProgressBar pb_buttom_more;
	private ListView mListView;
	private String[] presidents;
	private ResultListAdapter resultListAdapter;
	private LinearLayout ll_main_list_left;
	private RelativeLayout main_list_left_content;
	private List<AddressBean> mList;
	private List<SubLayer> subLayers = null;
	private PopGestureManager popGestureManager;
	private Handler mHandler = new Handler();
	private SDBHelper sdbHelper;
	private Spinner mSpinner;
	private SubLayer currentSubLayer;
	private GraphicsLayer tempLayer;
	private String cum = "";
	private int cum_index = 0;
	// ListView底部View
	private View moreView;

	/**
	 * 
	 * @param context
	 * @param mainMapView
	 */
	public MainLeftListView(Context context, MapView mainMapView,
			LinearLayout ll_main_list_left, GraphicsLayer tempLayer) {
		// TODO Auto-generated constructor stub
		this.mContext = context;
		this.mainMapView = mainMapView;
		this.ll_main_list_left = ll_main_list_left;
		this.tempLayer = tempLayer;
		popGestureManager = new PopGestureManager(context, mainMapView);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.android.smartmobile.cz.interf.InitActivity#initData()
	 */
	@Override
	public void initData() {
		// TODO Auto-generated method stub

		mList = new ArrayList<AddressBean>();

		try {
			// PullParseConfigMapService.getInstance();

			subLayers = PullParseConfigMapService.getSubLayers();
			currentSubLayer = subLayers.get(0);
			presidents = new String[subLayers.size()];

			for (int i = 0; i < subLayers.size(); i++) {
				presidents[i] = subLayers.get(i).getName();
			}
			LogUtil.LoLoLog().d(subLayers.size());

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	class GetDataAsyncTask extends AsyncTask<SubLayer, Void, List<AddressBean>> {

		ProgressDialog pdialog;

		@Override
		protected void onPostExecute(List<AddressBean> result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);

			if (result != null && result.size() != 0) {
				mList.addAll(result);

				if ((mList.size() - result.size()) == 0) {
					resultListAdapter = new ResultListAdapter(mContext, mList);
					mListView.setAdapter(resultListAdapter);
				} else {
					resultListAdapter.notifyDataSetChanged();
				}

			} else {
				if ((mList.size() - result.size()) == mList.size()) {
					ToastUtil.makeToastInBottom("数据全部加载完成，没有更多数据！");
				} else {
					ToastUtil.makeToastInBottom("没有匹配的数据");
				}

			}

			pb_buttom_more.setVisibility(View.GONE);// 将进度条可见
			btn_buttom_more.setVisibility(View.VISIBLE);// 按钮不可见

			if (pdialog.isShowing()) {
				pdialog.dismiss();
			}

		}

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
			pdialog = new ProgressDialog(mContext);
			pdialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
			pdialog.setMessage("正在查询...");
			pdialog.show();
		}

		@Override
		protected List<AddressBean> doInBackground(SubLayer... params) {
			// TODO Auto-generated method stub
			List<AddressBean> list = getData(params[0]);
			if (list == null || list.size() == 0)
				return null;
			LogUtil.LoLoLog().d("查询到目标" + list.size() + "个");
			if (list != null && list.size() > 0) {
				if (null != tempLayer) {
					tempLayer.removeAll();
				}
				for (int i = 0; i < list.size(); i++) {
					addPolygonToGraphicsLayer(list.get(i), tempLayer, false);
				}

			}

			return list;
		}

	}

	/**
	 * 组合sql语句
	 * 
	 * @param subLayer
	 * @return
	 */
	public String toSql(SubLayer subLayer) {
		return "SELECT PK_UID ID,"
				+ subLayer.getTitleField()
				+ " NAME,"
				+ subLayer.getSubTitleField()
				+ " SUBNAME,ST_AsText(Geometry) GEOMETRY ,ST_AsText(ST_Centroid(Geometry)) CENTROID"
				+ " FROM " + subLayer.getTableName() + " WHERE PK_UID >"
				+ cum_index * 50 + " AND PK_UID <=" + (cum_index + 1) * 50 + "";
	}

	/**
	 * 组合sql语句
	 * 
	 * @param subLayer
	 * @param cum
	 * @return
	 */
	public String toSql(SubLayer subLayer, String cum) {
		return "SELECT PK_UID ID,"
				+ subLayer.getTitleField()
				+ " NAME,"
				+ subLayer.getSubTitleField()
				+ " SUBNAME,ST_AsText(Geometry) GEOMETRY ,ST_AsText(ST_Centroid(Geometry)) CENTROID"
				+ " FROM " + subLayer.getTableName() + " WHERE NAME LIKE '%"
				+ cum.replace(" ", "%") + "%' OR SUBNAME LIKE '%"
				+ cum.replace(" ", "%") + "%'  WHERE PK_UID >" + cum_index * 50
				+ " AND PK_UID <=" + (cum_index + 1) * 50 + "";
	}

	/**
	 * 根据查询条件查询
	 * 
	 * @param condition
	 * @return
	 */
	List<AddressBean> getData(SubLayer s) {

		List<AddressBean> list = null;
		sdbHelper = new SDBHelper();
		try {
			if (StringUtil.isEmpty(cum)) {
				// String ss =
				// "SELECT PK_UID ID,项目名称 NAME,用地性质 SUBNAME,ST_AsText(Geometry) GEOMETRY ,ST_AsText(ST_Centroid(Geometry)) CENTROID from PGIS_ydxkz t where PK_UID=1";
				// list = sdbHelper.getResultBySql(ss, s.getTableName());
				list = sdbHelper.getResultBySql(toSql(s), s.getTableName());
			} else {
				list = sdbHelper
						.getResultBySql(toSql(s, cum), s.getTableName());
			}
			if (list == null || list.size() == 0)
				return null;

		} catch (jsqlite.Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

			LogUtil.LoLoLog().e(e.getMessage());
			return null;
		}
		return list;

	}

	@SuppressLint("NewApi")
	@Override
	public void initView() {

		initData();
		// 实例化底部布局
		moreView = LayoutInflater.from(mContext).inflate(R.layout.moredata,
				null);

		btn_buttom_more = (Button) moreView.findViewById(R.id.btn_buttom_more);
		btn_buttom_more.setOnClickListener(this);
		pb_buttom_more = (ProgressBar) moreView
				.findViewById(R.id.pb_buttom_more);

		main_list_left_content = (RelativeLayout) ll_main_list_left
				.findViewById(R.id.main_list_left_content);

		// pop.xml视图里面的控件
		mListView = (ListView) main_list_left_content
				.findViewById(R.id.lv_list);
		mListView.setDivider(null);
		mListView.setFastScrollAlwaysVisible(false);
	//	mListView.addFooterView(moreView);

		// 列表按钮
		// btn_list_type = (Button) main_list_left_content
		// .findViewById(R.id.btn_list_type);
		// btn_list_type
		// .setText(catalogs.get(0).getGroupLayers().get(0).getName());

		mSpinner = (Spinner) main_list_left_content
				.findViewById(R.id.spinner_list);

		// 关闭按钮
		btn_list_close = (Button) main_list_left_content
				.findViewById(R.id.btn_list_close);

		edit_search = (EditText) main_list_left_content
				.findViewById(R.id.edit_list);

		LogUtil.LoLoLog().d(toSql(subLayers.get(0)));
		new GetDataAsyncTask().execute(subLayers.get(0));

		mListView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {

				Constants.HANDLER_MAIN
						.sendEmptyMessage(Constants.WHAT_REFRESH_PLOYGON_CLICK);

				// TODO Auto-generated method stub
				ToastUtil.makeToastInBottom(mList.get(arg2).getName());
				// LogUtil.LoLoLog().d(mList.get(arg2).getName());
				addPolygonToGraphicsLayer(mList.get(arg2), tempLayer, true);
			}
		});

		// btn_list_type.setOnClickListener(this);
		btn_list_close.setOnClickListener(this);

		edit_search.addTextChangedListener(new TextWatcher() {

			@Override
			public void onTextChanged(CharSequence s, int start, int before,
					int count) {
				// TODO Auto-generated method stub
				if (StringUtil.isEmpty(s.toString()))
					return;
				cum = s.toString();
				// 异步查询
				new GetDataAsyncTask().execute(currentSubLayer);

			}

			@Override
			public void beforeTextChanged(CharSequence s, int start, int count,
					int after) {
				// TODO Auto-generated method stub

			}

			@Override
			public void afterTextChanged(Editable s) {
				// TODO Auto-generated method stub

			}
		});

		ArrayAdapter<String> adapter = new ArrayAdapter<String>(mContext,
				android.R.layout.simple_spinner_item, presidents);

		adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		mSpinner.setAdapter(adapter);
		mSpinner.setOnItemSelectedListener(new OnItemSelectedListener() {
			@Override
			public void onItemSelected(AdapterView<?> arg0, View arg1,
					int arg2, long arg3) {
				if (arg2 == 2)
					return;
				int index = arg0.getSelectedItemPosition();
				// ToastUtil.makeToastInBottom("You have selected item : "
				// + presidents[index]);
				currentSubLayer = subLayers.get(arg2);
				edit_search.setText("");
				cum = "";
				new GetDataAsyncTask().execute(currentSubLayer);

			}

			@Override
			public void onNothingSelected(AdapterView<?> arg0) {
			}
		});

	}

	private void showCalloutView(MapView mapView, final AddressBean addressBean) {
		String centerPoint = addressBean.getCentroid();
		String string = centerPoint.replaceFirst("POINT", "")
				.replaceAll("\\(", "").replaceAll("\\)", "");
		String[] pointStringArray = string.split(" ");
		Point mapPoint = new Point(
				StringUtil.String2Double(pointStringArray[0]),
				StringUtil.String2Double(pointStringArray[1]));

		final Callout callout = mapView.getCallout();

		// callout.setOffset(0, 10);
		CalloutStyle style = new CalloutStyle();
		style.setAnchor(5);
		style.setBackgroundColor(Color.parseColor("#FFFFFF"));
		// style.setBackgroundAlpha(10);
		style.setCornerCurve(1);
		// style.setFrameColor(R.color.tra);
		callout.setStyle(style);
		View view1 = LayoutInflater.from(mContext).inflate(
				R.layout.layout_callout, null);
		callout.setContent(view1);
		// Button btn_callout_modify = (Button) view1
		// .findViewById(R.id.btn_callout_modify);

		TextView txt = (TextView) view1.findViewById(R.id.txt_callout);
		Button btn_callout_go = (Button) view1
				.findViewById(R.id.btn_callout_go);

		txt.setText(addressBean.getName());
		if (!callout.isShowing()) {
			// mapView.setOnStatusChangedListener(onStatusChangedListener);
			mapView.zoomToScale(mapPoint, 13000);
			callout.setCoordinates(mapPoint);
			callout.show();
		} else {
			mapView.zoomToScale(mapPoint, 13000);
			callout.move(mapPoint);
		}

		btn_callout_go.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				callout.hide();
				if (null != popGestureManager.getPopupWindow()) {
					popGestureManager.getPopupWindow().dismiss();
					popGestureManager.setPopupWindow(null);
					return;
				} else {
					popGestureManager.init(addressBean);
					int[] location = new int[2];

					Constants.ll_right_menu.getLocationOnScreen(location);

					popGestureManager.getPopupWindow().showAtLocation(
							Constants.ll_right_menu,
							Gravity.NO_GRAVITY,
							location[0]
									- popGestureManager.getPopupWindow()
											.getWidth() + 70, location[1]);

				}
			}

		});

	}

	/**
	 * 将面绘制到图层上
	 * 
	 * @param addressBean
	 * @param graphicsLayer
	 * @param isLocation
	 */
	public void addPolygonToGraphicsLayer(AddressBean addressBean,

	GraphicsLayer graphicsLayer, boolean isLocation) {
		String polygonString = addressBean.getGeometry();
		if (polygonString == null || polygonString.equalsIgnoreCase(""))
			return;
		if (graphicsLayer == null) {
			graphicsLayer = new GraphicsLayer();
			mainMapView.addLayer(graphicsLayer);
		}

		String multiplygonString = polygonString
				.replaceFirst("MULTIPOLYGON", "").replaceAll("\\(\\(\\(", "")
				.replaceAll("\\)\\)\\)", "");
		// LogUtil.LoLoLog().e(multiplygonString);

		String[] multiplygon = multiplygonString.trim().split("\\)\\), \\(\\(");
		Graphic graphic = null;
		Map<String, Object> map = null;
		for (String string : multiplygon) {
			String[] pointStringArray = string.split(",");
			Polygon polygon = new Polygon();

			for (int index = 0; index < pointStringArray.length; index++) {
				String pointString = pointStringArray[index];

				String[] point = pointString.trim().split(" ");
				if (0 == index) {

					polygon.startPath(Double.parseDouble(point[0]),
							Double.parseDouble(point[1]));
				} else {
					try {
						polygon.lineTo(Double.parseDouble(point[0]),
								Double.parseDouble(point[1]));
					} catch (NumberFormatException e) {
						// TODO: handle exception
						LogUtil.LoLoLog().d(
								"id:" + addressBean.getId() + "----  name:"
										+ addressBean.getName());
					}

				}
				// polygon.setXY(index, Double.parseDouble(point[0]),
				// Double.parseDouble(point[1]));
			}

			map = new HashMap<String, Object>();
			map.put("ID", addressBean.getId());
			map.put("NAME", addressBean.getName());
			map.put("TABLENAME", addressBean.getTableName());
			map.put("CENTROID", addressBean.getCentroid());
			graphic = new Graphic(polygon,
					new SymbolUtil(mContext).getPolygonAllSymbol(), map, null);
			graphicsLayer.addGraphic(graphic);
		}

		if (isLocation) {
			showCalloutView(mainMapView, addressBean);

		}

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.android.smartmobile.cz.interf.InitActivity#clearView()
	 */
	@Override
	public void clearView() {
		// TODO Auto-generated method stub

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.view.View.OnTouchListener#onTouch(android.view.View,
	 * android.view.MotionEvent)
	 */

	void showListTypePopWindow() {
		View popupWindow_view = LayoutInflater.from(mContext).inflate(
				R.layout.dialog_list_type, null, false);
		// 创建PopupWindow实例,200,150分别是宽度和高度
		PopupWindow popup = new PopupWindow(popupWindow_view, 300, 400);
		// MyApplication.mApp.popupWindows.add(popupWindow);
		// 设置动画效果
		popup.setBackgroundDrawable(new BitmapDrawable());
		// popup.setAnimationStyle(R.style.AnimationFade);
		popup.setOutsideTouchable(true);
		popup.setFocusable(true);
		popup.update();
		int[] location = new int[2];

		btn_list_type.getLocationOnScreen(location);
		popup.showAtLocation(Constants.ll_left_menu, Gravity.NO_GRAVITY,
				location[0] + 360, location[1]);

		ExpandableListView expandableListView = (ExpandableListView) popupWindow_view
				.findViewById(R.id.ex_pop_list_type);
		expandableListView.setGroupIndicator(null);// 取消默认的ExpandableListview的默认指示的图标;;;
		// expandableListView.setAdapter(new ExListTypeAdapter(mContext,
		// catalogs,
		// mainMapView));
		expandableListView.setOnChildClickListener(new OnChildClickListener() {

			@Override
			public boolean onChildClick(ExpandableListView parent, View v,
					int groupPosition, int childPosition, long id) {
				// TODO Auto-generated method stub
				return true;
			}
		});
		// 将所有项设置成默认展开

		expandableListView.setDivider(null);

		int groupCount = expandableListView.getCount();

		for (int i = 0; i < groupCount; i++) {
			expandableListView.expandGroup(i);
		}
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.btn_buttom_more:

			pb_buttom_more.setVisibility(View.VISIBLE);// 将进度条可见
			btn_buttom_more.setVisibility(View.GONE);// 按钮不可见
			cum_index++;
			new GetDataAsyncTask().execute(currentSubLayer);
			break;
		case R.id.btn_list_close:
			ll_main_list_left.setVisibility(View.GONE);
			Constants.HANDLER_MAIN
					.sendEmptyMessage(Constants.WHAT_REFRESH_PLOYGON_CLICK);
			break;

		default:
			break;
		}
	}
}
