/**
 * 
 */
package com.android.smartmobile.cz.view;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.android.smartmobile.cz.R;
import com.android.smartmobile.cz.adapter.ExListTypeAdapter;
import com.android.smartmobile.cz.adapter.ResultListAdapter;
import com.android.smartmobile.cz.bean.AddressBean;
import com.android.smartmobile.cz.bean.Catalog;
import com.android.smartmobile.cz.bean.SubLayer;
import com.android.smartmobile.cz.db.SDBHelper;
import com.android.smartmobile.cz.finals.Constants;
import com.android.smartmobile.cz.interf.InitActivity;
import com.android.smartmobile.cz.model.BaseActivity;
import com.android.smartmobile.cz.service.PullParseConfigMapService;
import com.android.smartmobile.cz.util.LogUtil;
import com.android.smartmobile.cz.util.StringUtil;
import com.android.smartmobile.cz.util.ToastUtil;
import com.esri.android.map.Callout;
import com.esri.android.map.CalloutStyle;
import com.esri.android.map.GraphicsLayer;
import com.esri.android.map.MapView;
import com.esri.core.geometry.Point;
import com.esri.core.geometry.Polygon;
import com.esri.core.map.Graphic;
import com.esri.core.symbol.MarkerSymbol;
import com.esri.core.symbol.PictureMarkerSymbol;
import com.esri.core.symbol.SimpleFillSymbol;
import com.esri.core.symbol.SimpleLineSymbol;
import com.smartmobile.sdk.graphics.PlottingTouchlistener;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.BitmapDrawable;
import android.os.AsyncTask;
import android.os.Handler;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ExpandableListView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.TextView;
import android.widget.ExpandableListView.OnChildClickListener;
import android.widget.RelativeLayout;
import android.widget.Spinner;

/**
 * 
 * @ClassName: PopListManager
 * @Description:
 * @author Administrator
 * @date 2013年8月3日 下午19:52:17
 * @Company: www.shdci.com
 * @Copyright: Copyright (c) 2013 All rights reserved.
 * @version
 */
public class MainRightListView extends BaseActivity implements InitActivity,
		OnClickListener {
	private Context mContext;
	private MapView mainMapView = null;
	private EditText edit_search;
	private Button btn_list_type, btn_list_close;
	private ListView mListView;
	private String[] presidents;
	private ResultListAdapter resultListAdapter;
	private LinearLayout ll_main_list_left;
	private RelativeLayout main_list_left_content;
	private List<AddressBean> mList;
	private List<SubLayer> subLayers = null;

	private Handler mHandler = new Handler();
	private SDBHelper sdbHelper;
	private Spinner mSpinner;
	private String tableName;
	private GraphicsLayer tempLayer;
	private MarkerSymbol mPoint_select_Symbol;

	/**
	 * 
	 * @param context
	 * @param mainMapView
	 */
	public MainRightListView(Context context, MapView mainMapView,
			LinearLayout ll_main_list_left) {
		// TODO Auto-generated constructor stub
		this.mContext = context;
		this.mainMapView = mainMapView;
		this.ll_main_list_left = ll_main_list_left;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.android.smartmobile.cz.interf.InitActivity#initData()
	 */
	@Override
	public void initData() {
		// TODO Auto-generated method stub
		mList = new ArrayList<AddressBean>();

		try {
			// PullParseConfigMapService.getInstance();

			subLayers = PullParseConfigMapService.getSubLayers();

			presidents = new String[subLayers.size()];

			for (int i = 0; i < subLayers.size(); i++) {
				presidents[i] = subLayers.get(i).getName();
			}
			LogUtil.LoLoLog().d(subLayers.size());

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	class GetDataAsyncTask extends AsyncTask<String, Void, List<AddressBean>> {

		ProgressDialog pdialog;

		@Override
		protected void onPostExecute(List<AddressBean> result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			mList = result;

			if (result != null && result.size() != 0) {
				resultListAdapter = new ResultListAdapter(mContext, result);
				mListView.setAdapter(resultListAdapter);
			} else {
				ToastUtil.makeToastInBottom("没有数据");
			}

			if (pdialog.isShowing()) {
				pdialog.dismiss();
			}

		}

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
			pdialog = new ProgressDialog(mContext);
			pdialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
			pdialog.setMessage("正在查询...");
			pdialog.show();
		}

		@Override
		protected List<AddressBean> doInBackground(String... params) {
			// TODO Auto-generated method stub
			List<AddressBean> list = getData(params[0]);

			for (int i = 0; i < list.size(); i++) {
				addPolygonToGraphicsLayer(list.get(i), tempLayer, false);
			}

			return list;
		}

	}

	String toSql(SubLayer subLayer) {
		String cum = subLayer.getTitleField()
				+ " NAME,"
				+ subLayer.getSubTitleField()
				+ " SUBNAME,ST_AsText(Geometry) GEOMETRY ,ST_AsText(ST_Centroid(Geometry)) ST_CENTROID";
		tableName = subLayer.getTableName();
		String sql = "SELECT PK_UID ID," + cum + " FROM " + tableName
				+ " LIMIT 100";
		return sql;
	}

	/**
	 * 根据查询条件查询
	 * 
	 * @param condition
	 * @return
	 */
	List<AddressBean> getData(String sql) {
		List<AddressBean> list = new ArrayList<AddressBean>();
		sdbHelper = new SDBHelper();
		List<Map<String, String>> listHashMaps;
		try {
			listHashMaps = sdbHelper.getResultByName(sql);
			if (listHashMaps == null || listHashMaps.size() == 0)
				return null;
			for (int i = 0; i < listHashMaps.size(); i++) {
				Map<String, String> map = listHashMaps.get(i);
				AddressBean addressBean = new AddressBean();
				Set<String> set = map.keySet();
				for (String key : set) {

					LogUtil.LoLoLog().d(key + "----" + map.get(key));

					if (key.equalsIgnoreCase("ID")) {
						addressBean.setId(map.get(key));
					} else if (key.equalsIgnoreCase("NAME")) {
						addressBean.setName(map.get(key));
					} else if (key.equalsIgnoreCase("SUBNAME")) {
						addressBean.setSubname(map.get(key));
					} else if (key.equalsIgnoreCase("GEOMETRY")) {
						addressBean.setGeometry(map.get(key));
					} else if (key.equalsIgnoreCase("ST_CENTROID")) {
						addressBean.setCentroid(map.get(key));
					}
					list.add(addressBean);
				}
			}
		} catch (jsqlite.Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return list;
	}

	@Override
	public void initView() {

		initData();

		main_list_left_content = (RelativeLayout) ll_main_list_left
				.findViewById(R.id.main_list_left_content);

		// pop.xml视图里面的控件
		mListView = (ListView) main_list_left_content
				.findViewById(R.id.lv_list);
		mListView.setDivider(null);
		mListView.setFastScrollEnabled(false);
		// 列表按钮
		// btn_list_type = (Button) main_list_left_content
		// .findViewById(R.id.btn_list_type);
		// btn_list_type
		// .setText(catalogs.get(0).getGroupLayers().get(0).getName());

		mSpinner = (Spinner) main_list_left_content
				.findViewById(R.id.spinner_list);

		// 关闭按钮
		btn_list_close = (Button) main_list_left_content
				.findViewById(R.id.btn_list_close);

		edit_search = (EditText) main_list_left_content
				.findViewById(R.id.edit_list);

		String sql = toSql(subLayers.get(0));

		LogUtil.LoLoLog().d(sql);
		new GetDataAsyncTask().execute(sql);

		mListView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {

				// TODO Auto-generated method stub
				ToastUtil.makeToastInBottom(mList.get(arg2).getName());
				// LogUtil.LoLoLog().d(mList.get(arg2).getName());

				addPolygonToGraphicsLayer(mList.get(arg2), tempLayer, true);

			}
		});

		// btn_list_type.setOnClickListener(this);
		btn_list_close.setOnClickListener(this);

		edit_search.addTextChangedListener(new TextWatcher() {

			@Override
			public void onTextChanged(CharSequence s, int start, int before,
					int count) {
				// TODO Auto-generated method stub
				if (StringUtil.isEmpty(s.toString()))
					return;

				// 异步查询
				// new GetDataAsyncTask().execute("PGIS_address", s.toString());

			}

			@Override
			public void beforeTextChanged(CharSequence s, int start, int count,
					int after) {
				// TODO Auto-generated method stub

			}

			@Override
			public void afterTextChanged(Editable s) {
				// TODO Auto-generated method stub

			}
		});

		ArrayAdapter<String> adapter = new ArrayAdapter<String>(mContext,
				android.R.layout.simple_spinner_item, presidents);

		adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		mSpinner.setAdapter(adapter);
		mSpinner.setOnItemSelectedListener(new OnItemSelectedListener() {
			@Override
			public void onItemSelected(AdapterView<?> arg0, View arg1,
					int arg2, long arg3) {
				int index = arg0.getSelectedItemPosition();
				ToastUtil.makeToastInBottom("You have selected item : "
						+ presidents[index]);

				switch (arg2) {
				case 0:
					tableName = subLayers.get(arg2).getUrl();
					break;
				case 1:

					break;
				case 2:

					break;

				default:
					break;
				}
			}

			@Override
			public void onNothingSelected(AdapterView<?> arg0) {
			}
		});

		mPoint_select_Symbol = new PictureMarkerSymbol(mContext.getResources()
				.getDrawable(R.drawable.location_point));

	}

	private void showCalloutView(MapView mapView, AddressBean addressBean) {
		String centerPoint=addressBean.getCentroid();
		String string = centerPoint
				.replaceFirst("POINT", "").replaceAll("\\(", "")
				.replaceAll("\\)", "");
		String[] pointStringArray = string.split(" ");
		Point mapPoint=new Point(StringUtil.String2Double(pointStringArray[0]),StringUtil.String2Double(pointStringArray[1]));
		
		
		if (mapView.getCallout().isShowing())
			mapView.getCallout().hide();
		final Callout callout = mapView.getCallout();
		callout.setCoordinates(mapPoint);
		// callout.setOffset(0, 10);
		CalloutStyle style = new CalloutStyle();
		style.setAnchor(5);
		style.setBackgroundColor(Color.parseColor("#FFFFFF"));
		// style.setBackgroundAlpha(10);
		style.setCornerCurve(1);
		// style.setFrameColor(R.color.tra);
		callout.setStyle(style);
		View view1 = LayoutInflater.from(mContext).inflate(
				R.layout.layout_callout, null);
		callout.setContent(view1);
		// Button btn_callout_modify = (Button) view1
		// .findViewById(R.id.btn_callout_modify);

		TextView txt = (TextView) view1.findViewById(R.id.txt_callout);
		txt.setText(addressBean.getName());
		if (!callout.isShowing())
			callout.show();
		txt.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View view) {

				callout.hide();
			}

		});
		
		mapView.zoomToScale(mapPoint, 13000);

	}

	public void addPolygonToGraphicsLayer(AddressBean addressBean,

	GraphicsLayer graphicsLayer, boolean isLocation) {
		String polygonString = addressBean.getGeometry();
		if (polygonString == null || polygonString.equalsIgnoreCase(""))
			return;
		if (graphicsLayer == null) {
			graphicsLayer = new GraphicsLayer();
			mainMapView.addLayer(graphicsLayer);
		}

		
		String multiplygonString = polygonString
				.replaceFirst("MULTIPOLYGON", "").replaceAll("\\(\\(\\(", "")
				.replaceAll("\\)\\)\\)", "");
		//LogUtil.LoLoLog().e(multiplygonString);
		if (!multiplygonString.trim().contains("\\)\\), \\(\\(")) {
			String[] multiplygon = multiplygonString.trim().split(
					"\\)\\), \\(\\(");

			for (String string : multiplygon) {
				String[] pointStringArray = string.split(",");
				Polygon polygon = new Polygon();

				for (int index = 0; index < pointStringArray.length; index++) {
					String pointString = pointStringArray[index];

					String[] point = pointString.trim().split(" ");
					if (0 == index) {
						polygon.startPath(Double.parseDouble(point[0]),
								Double.parseDouble(point[1]));
					} else {
						
						polygon.lineTo(Double.parseDouble(point[0]),
								Double.parseDouble(point[1]));
					}
					// polygon.setXY(index, Double.parseDouble(point[0]),
					// Double.parseDouble(point[1]));
				}
				Graphic graphic = null;
				SimpleFillSymbol simpleFillSymbol = null;

				simpleFillSymbol = new SimpleFillSymbol(Color.CYAN);
				simpleFillSymbol.setAlpha(153);
				simpleFillSymbol
						.setOutline(new SimpleLineSymbol(Color.GREEN, 1));
				graphic = new Graphic(polygon, simpleFillSymbol);

				graphicsLayer.addGraphic(graphic);
			}

		} else {
			String[] pointStringArray = multiplygonString.split(",");

			Polygon polygon = new Polygon();

			for (int index = 0; index < pointStringArray.length; index++) {
				String pointString = pointStringArray[index];
				String[] point = pointString.trim().split(" ");
				if (0 == index) {
					polygon.startPath(Double.parseDouble(point[0]),
							Double.parseDouble(point[1]));
				} else {
					polygon.lineTo(Double.parseDouble(point[0]),
							Double.parseDouble(point[1]));
				}
				// polygon.setXY(index, Double.parseDouble(point[0]),
				// Double.parseDouble(point[1]));
			}
			Graphic graphic = null;
			SimpleFillSymbol simpleFillSymbol = null;

			simpleFillSymbol = new SimpleFillSymbol(Color.CYAN);
			simpleFillSymbol.setAlpha(153);
			simpleFillSymbol.setOutline(new SimpleLineSymbol(Color.GREEN, 1));
			graphic = new Graphic(polygon, simpleFillSymbol);

			graphicsLayer.addGraphic(graphic);
		}

		if (isLocation) {
			showCalloutView(mainMapView, addressBean);

		}

	}

	void Location(MapView mapView, Point multiPoint) {
		if (tempLayer == null) {
			tempLayer = new GraphicsLayer();
			mainMapView.addLayer(tempLayer);
		}
		Graphic drawGraphic = new Graphic(multiPoint, this.mPoint_select_Symbol);
		tempLayer.addGraphic(drawGraphic);
		mainMapView.centerAt(multiPoint, true);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.android.smartmobile.cz.interf.InitActivity#clearView()
	 */
	@Override
	public void clearView() {
		// TODO Auto-generated method stub

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.view.View.OnTouchListener#onTouch(android.view.View,
	 * android.view.MotionEvent)
	 */

	void showListTypePopWindow() {
		View popupWindow_view = LayoutInflater.from(mContext).inflate(
				R.layout.dialog_list_type, null, false);
		// 创建PopupWindow实例,200,150分别是宽度和高度
		PopupWindow popup = new PopupWindow(popupWindow_view, 300, 400);
		// MyApplication.mApp.popupWindows.add(popupWindow);
		// 设置动画效果
		popup.setBackgroundDrawable(new BitmapDrawable());
		// popup.setAnimationStyle(R.style.AnimationFade);
		popup.setOutsideTouchable(true);
		popup.setFocusable(true);
		popup.update();
		int[] location = new int[2];

		btn_list_type.getLocationOnScreen(location);
		popup.showAtLocation(Constants.ll_left_menu, Gravity.NO_GRAVITY,
				location[0] + 360, location[1]);

		ExpandableListView expandableListView = (ExpandableListView) popupWindow_view
				.findViewById(R.id.ex_pop_list_type);
		expandableListView.setGroupIndicator(null);// 取消默认的ExpandableListview的默认指示的图标;;;
		// expandableListView.setAdapter(new ExListTypeAdapter(mContext,
		// catalogs,
		// mainMapView));
		expandableListView.setOnChildClickListener(new OnChildClickListener() {

			@Override
			public boolean onChildClick(ExpandableListView parent, View v,
					int groupPosition, int childPosition, long id) {
				// TODO Auto-generated method stub
				return true;
			}
		});
		// 将所有项设置成默认展开

		expandableListView.setDivider(null);

		int groupCount = expandableListView.getCount();

		for (int i = 0; i < groupCount; i++) {
			expandableListView.expandGroup(i);
		}
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.btn_list_type:

			mHandler.postDelayed(new Runnable() {
				@Override
				public void run() {
					showListTypePopWindow();
				}
			}, 200);
			break;
		case R.id.btn_list_close:
			ll_main_list_left.setVisibility(View.GONE);
			break;

		default:
			break;
		}
	}
}
