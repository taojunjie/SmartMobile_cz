/**
 * 
 */
package com.android.smartmobile.cz.activity;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.xmlpull.v1.XmlPullParserException;

import android.app.ProgressDialog;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.android.smartmobile.cz.R;
import com.android.smartmobile.cz.adapter.ResultListAdapter;
import com.android.smartmobile.cz.bean.AddressBean;
import com.android.smartmobile.cz.bean.AppConfigInfo;
import com.android.smartmobile.cz.bean.Module;
import com.android.smartmobile.cz.bean.Modules;
import com.android.smartmobile.cz.bean.SubLayer;
import com.android.smartmobile.cz.bean.TitleBean;
import com.android.smartmobile.cz.db.SDBHelper;
import com.android.smartmobile.cz.finals.Constants;
import com.android.smartmobile.cz.interf.InitActivity;
import com.android.smartmobile.cz.listener.MapDefaultListener;
import com.android.smartmobile.cz.map.LooMapControl;
import com.android.smartmobile.cz.map.MapMeasure;
import com.android.smartmobile.cz.map.OfflineCacheTiledServiceLayer;
import com.android.smartmobile.cz.map.VectorPhotoLayer;
import com.android.smartmobile.cz.model.BaseActivity;
import com.android.smartmobile.cz.model.MyApplication;
import com.android.smartmobile.cz.service.PullParseConfigMapService;
import com.android.smartmobile.cz.service.PullParseConfigService;
import com.android.smartmobile.cz.util.LogUtil;
import com.android.smartmobile.cz.util.MapHelper;
import com.android.smartmobile.cz.util.StringUtil;
import com.android.smartmobile.cz.util.SymbolUtil;
import com.android.smartmobile.cz.util.ToastUtil;
import com.android.smartmobile.cz.view.BaseMapToolView;
import com.android.smartmobile.cz.view.MainLeftListView;
import com.android.smartmobile.cz.view.MainMapView;
import com.android.smartmobile.cz.view.MainRightTitleListView;
import com.android.smartmobile.cz.view.MainWebView;
import com.android.smartmobile.cz.view.pop.PopGestureManager;
import com.android.smartmobile.cz.view.pop.PopListManager;
import com.android.smartmobile.cz.view.pop.PopRightTitleManager;
import com.android.smartmobile.cz.view.pop.PopWebManager;
import com.esri.android.map.Callout;
import com.esri.android.map.CalloutStyle;
import com.esri.android.map.GraphicsLayer;
import com.esri.android.map.Layer;
import com.esri.android.map.MapView;
import com.esri.android.map.ags.ArcGISDynamicMapServiceLayer;
import com.esri.android.map.ags.ArcGISFeatureLayer;
import com.esri.android.map.ags.ArcGISLayerInfo;
import com.esri.android.map.ags.ArcGISLocalTiledLayer;
import com.esri.android.map.ags.ArcGISTiledMapServiceLayer;
import com.esri.android.map.event.OnLongPressListener;
import com.esri.android.map.event.OnSingleTapListener;
import com.esri.android.map.event.OnStatusChangedListener;
import com.esri.android.map.event.OnZoomListener;
import com.esri.android.map.event.OnStatusChangedListener.STATUS;
import com.esri.core.geometry.Envelope;
import com.esri.core.geometry.Geometry;
import com.esri.core.geometry.Point;
import com.esri.core.geometry.Polygon;
import com.esri.core.geometry.Polyline;
import com.esri.core.map.FeatureTemplate;
import com.esri.core.map.FeatureType;
import com.esri.core.map.Graphic;
import com.esri.core.map.Legend;
import com.esri.core.map.FeatureTemplate.DRAWING_TOOL;
import com.esri.core.portal.WebMapLayer;
import com.esri.core.renderer.Renderer;
import com.esri.core.symbol.SimpleLineSymbol;
import com.esri.core.symbol.SimpleMarkerSymbol;
import com.esri.core.symbol.Symbol;
import com.smartmobile.sdk.graphics.DrawTool;

/**
 * 
 * @ClassName:
 * @Description:
 * @author
 * @date 2013年7月31日 下午1:15:53
 * @Company: www.shdci.com
 * @Copyright: Copyright (c) 2013 All rights reserved.
 */

public class MainActivity extends BaseActivity implements InitActivity {
	private MapView mapView;
	private Context mContext;
	private RelativeLayout rl_main_scale;
	private LinearLayout ll_main_menu_left, ll_main_menu_left_content,
			ll_right_toolmenu, ll_main_menu_right, ll_main_list_left, ll_web,
			ll_main_right_title, ll_main_layermanager;
	private TextView txt_main_scale_down, txt_main_scale;
	private Button btn_left_menu_setting;
	private PopWebManager popWebManager;
	private PopListManager popListManager;
	private PopGestureManager popGestureManager;
	private PopRightTitleManager popRightTitleManager;
	private List<AddressBean> rimList;
	private MainLeftListView mainLeftListView;
	private MainWebView mainWebView;
	private SDBHelper sdbHelper;
	private double scale;
	// LooMapControl looMapControl;
	private GraphicsLayer graphicsLayer, highlightgraphicsLayer,
			rimGraphicsLayer;
	private boolean isFirst = false;
	private boolean isWebFirst = false;
	private MainRightTitleListView mainRightTitleListView;
	private List<SubLayer> subLayers;
	private List<TitleBean> titleBeans;
	private SubLayer currentSubLayer;

	private Handler handler = new Handler() {

		@Override
		public void handleMessage(Message msg) {
			// TODO Auto-generated method stub
			super.handleMessage(msg);
			switch (msg.what) {
			case Constants.WHAT_REFRESH_PLOYGON_CLICK:
				highlightgraphicsLayer.removeAll();
				break;

			default:
				break;
			}
		}

	};

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.android.smartmobile.cz.model.BaseActivity#onCreate(android.os.Bundle)
	 */
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.layout_main);
		mContext = MainActivity.this;

		initView();
		initData();

		popWebManager = new PopWebManager(mContext, mapView);
		popListManager = new PopListManager(mContext, mapView);
		popGestureManager = new PopGestureManager(mContext, mapView);
		popRightTitleManager = new PopRightTitleManager(mContext, mapView);
		// VectorPhotoLayer.getInstance().showPhotoMap(mapView);

		final String dynamicMapURL = "http://192.168.1.215:18180/ArcGIS/rest/services/TEST_Vector/MapServer";
		// MapHelper.AddDynamicMapServiceLayer(mapView,dynamicMapURL,"基础矢量");

		// 添加图层
		MapHelper.AddBaseMapLayer(mapView, 0);

		// mapView.setMaxResolution(264.583862501058);
		// mapView.setMinResolution(2.11667090000847);

		mapView.setOnStatusChangedListener(new OnStatusChangedListener() {
			private static final long serialVersionUID = 1L;

			public void onStatusChanged(Object arg0, STATUS arg1) {
				if (arg0 == mapView && arg1 == STATUS.INITIALIZED) {// 地图加载成功
					// Toast.makeText(mContext, "地图加载成功", Toast.LENGTH_SHORT)
					// .show();
					BaseMapToolView baseMapToolView = new BaseMapToolView(
							mapView, mContext, ll_right_toolmenu,
							ll_main_layermanager, null);
					baseMapToolView.Init();

					mainLeftListView = new MainLeftListView(mContext, mapView,
							ll_main_list_left, graphicsLayer);
					mainWebView = new MainWebView(mContext, mapView, ll_web);
					txt_main_scale_down.setText("1:"
							+ (int) MapHelper.getScale(mapView.getScale()));
					txt_main_scale.setText(MapHelper.getScaleString(mapView
							.getScale()));
				}

			}
		});

		mapView.setOnZoomListener(new OnZoomListener() {

			@Override
			public void preAction(float arg0, float arg1, double arg2) {
				// TODO Auto-generated method stub

			}

			@Override
			public void postAction(float arg0, float arg1, double arg2) {
				// TODO Auto-generated method stub
				if (mapView.getScale() < 8000) {
					ToastUtil.makeToastInBottom("已经到最大了");

				} else if (mapView.getScale() > 1000000) {
					ToastUtil.makeToastInBottom("已经到最小了");

				}
				txt_main_scale_down.setText("1:"
						+ (int) MapHelper.getScale(mapView.getScale()));
				txt_main_scale.setText(MapHelper.getScaleString(mapView
						.getScale()));
				LogUtil.LoLoLog().d(mapView.getScale());

			}
		});

		mapView.setMapBackground(Color.WHITE, Color.TRANSPARENT, 0, 0);

	}

	// 取得图例,并将取得的图例放到List<Legend> 中返回
	private List<Legend> getLends() {
		List<Legend> ls = new ArrayList<Legend>();
		Layer[] layers = mapView.getLayers();
		for (Layer l : layers) {
			if (l instanceof ArcGISFeatureLayer) {
				ArcGISFeatureLayer af = (ArcGISFeatureLayer) l;
				FeatureType[] types = af.getTypes();
				Renderer<Graphic> renders = af.getRenderer();
				for (FeatureType type : types) {
					FeatureTemplate[] tems = type.getTemplates();
					for (FeatureTemplate tem : tems) {
						String name = tem.getName();
						Graphic g = af.createFeatureWithTemplate(tem, null);
						Symbol s = renders.getSymbol(g);
						// 由于该FeatureLayer是个点图层，所以可以直接new Point(20, 20)，如下：
						// Bitmap bitmap= af.createSymbolImage(s, new Point(20,
						// 20), 40, 40, Color.WHITE);
						// 如果不知道FeatureLayer是的类型，就要需要使用FeatureTemplate.DRAWING_TOOL，如下createSymbolBitmap方法：
						Bitmap bitmap = createSymbolBitmap(af, tem);
						Legend le = new Legend(bitmap, name);
						ls.add(le);
					}
				}
				if (ls.size() == 0) {// 该FeatureLayer不包含FeatureType
					FeatureTemplate[] templates = af.getTemplates();
					for (FeatureTemplate template : templates) {
						Graphic gra = af.createFeatureWithTemplate(template,
								null);
						Symbol symbol = renders.getSymbol(gra);
						// Bitmap bitm=af.createSymbolImage(symbol, new
						// Point(20,20), 40, 40, Color.WHITE);
						Bitmap bitm = createSymbolBitmap(af, template);
						Legend le = new Legend(bitm, template.getName());
						ls.add(le);
					}
				}
			}

		}
		Log.i("GetLegendActivity", "共有图例" + ls.size());
		return ls;
	}

	// 如果不知道FeatureLayer的类型，可以通过 FeatureTemplate.DRAWING_TOOL来判断
	private Bitmap createSymbolBitmap(ArcGISFeatureLayer featurelayer,
			FeatureTemplate featureTemplate) {
		// determine feature type
		FeatureTemplate.DRAWING_TOOL drawing_tool = featureTemplate
				.getDrawingTool();
		Geometry geometry = null;
		if (drawing_tool == DRAWING_TOOL.POLYGON) {
			Polygon polygon = new Polygon();
			polygon.startPath(0, 0);
			polygon.lineTo(0, 40);
			polygon.lineTo(40, 40);
			polygon.lineTo(40, 0);
			polygon.lineTo(0, 0);
			geometry = polygon;
		} else if (drawing_tool == DRAWING_TOOL.LINE) {
			Polyline polyline = new Polyline();
			polyline.startPath(1, 1);
			polyline.lineTo(39, 39);
			geometry = polyline;
		} else if (drawing_tool == DRAWING_TOOL.POINT)
			geometry = new Point(20, 20);

		Graphic g = featurelayer.createFeatureWithTemplate(featureTemplate,
				null);
		Renderer<Graphic> renderer = featurelayer.getRenderer();
		Symbol symbol = renderer.getSymbol(g);
		Bitmap bitmap = featurelayer.createSymbolImage(symbol, geometry, 40,
				40, Color.WHITE);
		return bitmap;
	}

	private Map<String, List<Legend>> getLegendWithNameList(
			ArcGISDynamicMapServiceLayer dynamicLayer) {
		Map<String, List<Legend>> map = null;

		ArcGISLayerInfo[] arcGISLayerInfo = dynamicLayer.getLayers();
		int length = arcGISLayerInfo.length;
		if (length > 0) {
			map = new HashMap<String, List<Legend>>();
			for (int i = 0; i < length; i++) {
				ArcGISLayerInfo arcGISLayerInfo2 = arcGISLayerInfo[i];
				String name = arcGISLayerInfo2.getName();
				List<Legend> legends = arcGISLayerInfo2.getLegend();
				map.put(name, legends);
			}
		}

		return map;
	}

	@SuppressWarnings("null")
	private List<Legend> getLegendList(ArcGISTiledMapServiceLayer dynamicLayer) {

		List<Legend> list = null;
		ArcGISLayerInfo[] arcGISLayerInfo = dynamicLayer.getLayers();
		int length = arcGISLayerInfo.length;
		if (length > 0) {

			for (int i = 0; i < length; i++) {
				ArcGISLayerInfo arcGISLayerInfo2 = arcGISLayerInfo[i];
				String name = arcGISLayerInfo2.getName();
				List<Legend> legends = arcGISLayerInfo2.getLegend();
				if (legends != null && legends.size() > 0) {
					list.addAll(legends);
				}

			}
		}

		return list;
	}

	@Override
	protected void onResume() {
		super.onResume();
		mapView.unpause();
		if (mapView.getCallout().isShowing())
			mapView.getCallout().hide();

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.android.smartmobile.cz.interf.InitActivity#initData()
	 */
	@Override
	public void initData() {
		// TODO Auto-generated method stub
		Constants.HANDLER_MAIN = handler;
		Modules modules;
		try {
			// 解析模板数据

			PullParseConfigService.getInstance();
			modules = PullParseConfigService.getModules();
			// 初始化左侧导航菜单
			initLeftMenuView(modules.getList(), -1);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// 获取屏幕宽度
		WindowManager wm = (WindowManager) mContext
				.getSystemService(Context.WINDOW_SERVICE);

		Constants.WINDOW_WIDTH = wm.getDefaultDisplay().getWidth();
		Constants.WINDOW_HIGHT = wm.getDefaultDisplay().getHeight();

		ViewTreeObserver vto1 = ll_main_menu_left.getViewTreeObserver();
		vto1.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
			@Override
			public void onGlobalLayout() {
				ll_main_menu_left.getViewTreeObserver()
						.removeGlobalOnLayoutListener(this);
				Constants.MAIN_LEFT_MENU_WIDTH = ll_main_menu_left.getWidth();
				LogUtil.LoLoLog().d(Constants.MAIN_LEFT_MENU_WIDTH);

			}
		});

		ViewTreeObserver vto2 = ll_main_menu_right.getViewTreeObserver();
		vto2.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
			@Override
			public void onGlobalLayout() {
				ll_main_menu_left.getViewTreeObserver()
						.removeGlobalOnLayoutListener(this);
				Constants.MAIN_RIGHT_MENU_WIDTH = ll_main_menu_right.getWidth();
				LogUtil.LoLoLog().d(Constants.MAIN_RIGHT_MENU_WIDTH);
			}
		});
		rimGraphicsLayer = MyApplication.mApp.rimGraphicsLayer;
		mapView.addLayer(rimGraphicsLayer);
		// 初始化graphicsLayer
		graphicsLayer = new GraphicsLayer();
		mapView.addLayer(graphicsLayer);

		try {
			subLayers = PullParseConfigMapService.getSubLayers();
			currentSubLayer = subLayers.get(0);
		} catch (XmlPullParserException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		titleBeans = new ArrayList<TitleBean>();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.android.smartmobile.cz.interf.InitActivity#initView()
	 */
	@Override
	public void initView() {
		// TODO Auto-generated method stub
		// mainMapView = (MainMapView) this.findViewById(R.id.main_mapView);
		mapView = (MapView) this.findViewById(R.id.main_mapview);

		ll_main_menu_left = (LinearLayout) this
				.findViewById(R.id.ll_main_menu_left);
		ll_main_menu_left_content = (LinearLayout) this
				.findViewById(R.id.ll_main_menu_left_content);

		ll_web = (LinearLayout) this.findViewById(R.id.ll_web);

		btn_left_menu_setting = (Button) this
				.findViewById(R.id.btn_left_menu_setting);
		btn_left_menu_setting.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				ToastUtil.makeToastInBottom("setting");
			}
		});

		ll_main_menu_right = (LinearLayout) this
				.findViewById(R.id.ll_main_menu_right);

		ll_right_toolmenu = (LinearLayout) this
				.findViewById(R.id.ll_right_toolmenu);

		ll_main_layermanager = (LinearLayout) this
				.findViewById(R.id.ll_main_layermanager);

		ll_main_right_title = (LinearLayout) this
				.findViewById(R.id.ll_main_right_title);
		ll_main_list_left = (LinearLayout) this
				.findViewById(R.id.ll_main_list_left);
		rl_main_scale = (RelativeLayout) this.findViewById(R.id.rl_main_scale);
		txt_main_scale_down = (TextView) this
				.findViewById(R.id.txt_main_scale_down);
		txt_main_scale = (TextView) this.findViewById(R.id.txt_main_scale);

		Constants.ll_left_menu = ll_main_menu_left;
		Constants.ll_right_menu = ll_main_menu_right;

		// 设置地图监听
		mapView.setOnTouchListener(new MapDefaultListener(mContext, mapView,
				ll_main_layermanager));
		highlightgraphicsLayer = new GraphicsLayer();
		mapView.addLayer(highlightgraphicsLayer);
		mapView.setOnSingleTapListener(new OnSingleTapListener() {

			@Override
			public void onSingleTap(float x, float y) {
				// TODO Auto-generated method stub
				mapView.getCallout().hide();

				if (!mapView.isLoaded()) {
					return;
				}
				if (null == graphicsLayer) {
					return;
				}
				// 获取点击位置的要素
				int[] gids = graphicsLayer.getGraphicIDs(x, y, 5, 1);
				if (gids.length <= 0) {
					return;
				}
				// 获取到的点击对象
				Graphic gra = graphicsLayer.getGraphic(gids[0]);
				Map<String, Object> map = gra.getAttributes();
				// AddressBean addressBean = (AddressBean)
				// gra.getAttributeValue("TEST");
				// Point point=(Point) gra.getAttributeValue("CENT");
				// MapHelper.showCalloutView(mapView, mContext, addressBean, new
				// Point(StringUtil.String2Double(pointStringArray[0]),StringUtil.String2Double(pointStringArray[1])));
				String id = gra.getAttributeValue("ID").toString();
				String name = gra.getAttributeValue("NAME").toString();
				String tableName = gra.getAttributeValue("TABLENAME")
						.toString();
				String centroid = gra.getAttributeValue("CENTROID").toString();
				AddressBean addressBean = new AddressBean();
				addressBean.setId(id);
				addressBean.setName(name);
				addressBean.setTableName(tableName);

				PopGestureManager popGestureManager = new PopGestureManager(
						mContext, mapView);
				if (null != popGestureManager.getPopupWindow()) {
					popGestureManager.getPopupWindow().dismiss();
					popGestureManager.setPopupWindow(null);
					return;
				} else {
					popGestureManager.init(addressBean);
					int[] location = new int[2];

					Constants.ll_right_menu.getLocationOnScreen(location);

					popGestureManager.getPopupWindow().showAtLocation(
							Constants.ll_right_menu,
							Gravity.NO_GRAVITY,
							location[0]
									- popGestureManager.getPopupWindow()
											.getWidth() + 70, location[1]);

				}
				ArrayList<Geometry> list = new ArrayList<Geometry>();
				list.add(gra.getGeometry());

				MapHelper.flashGeometrys(mapView, list, highlightgraphicsLayer,
						true);

			}
		});

		mapView.setOnLongPressListener(new OnLongPressListener() {

			@Override
			public void onLongPress(float x, float y) {
				// TODO Auto-generated method stub

				Point screenPoint = mapView.toMapPoint(x, y);
				// String sql =
				// "SELECT PK_UID ID,项目名称 NAME,用地性质 SUBNAME,ST_AsText(Geometry) GEOMETRY from PGIS_ydxkz t where where ST_Intersects(t.Geometry,ST_Buffer(ST_GeometryFromText('POINT(507456.215904 3513251.910686)',2437),100))=1";

				// MapHelper.DrawCircle(mapView, screenPoint, 100, 25,
				// Color.YELLOW);

				new getRimAsyncTask().execute(
						toSql(subLayers.get(0), screenPoint.getX(),
								screenPoint.getY()),
						toSql(subLayers.get(1), screenPoint.getX(),
								screenPoint.getY()));

			}
		});

	}

	List<AddressBean> getRimData(String sql, String sql1) {
		TitleBean tlBean = null;
		List<AddressBean> list = new ArrayList<AddressBean>();
		titleBeans.clear();
		sdbHelper = new SDBHelper();
		try {
			List<AddressBean> list_1 = sdbHelper.getResultBySql(sql,
					currentSubLayer.getTableName());

			if (list_1.size() > 0) {
				tlBean = new TitleBean();
				tlBean.setName("规划工程红线");
				tlBean.setGroupLayers(list_1);
				titleBeans.add(tlBean);
				list.addAll(list_1);
			}
			LogUtil.LoLoLog().e(
					currentSubLayer.getTableName() + "-----------------"
							+ list.size());

			List<AddressBean> list_2 = sdbHelper.getResultBySql(sql1, subLayers
					.get(1).getTableName());
			if (list_2.size() > 0) {
				tlBean = new TitleBean();
				tlBean.setName("规划用地红线");
				tlBean.setGroupLayers(list_2);
				titleBeans.add(tlBean);
				list.addAll(list_2);
			}

			LogUtil.LoLoLog().e(
					subLayers.get(1).getTableName() + "-----------------"
							+ list.size());
		} catch (jsqlite.Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return list;
	}

	/**
	 * 组合sql语句
	 * 
	 * @param subLayer
	 * @return
	 */
	public String toSql(SubLayer subLayer, double x, double y) {

		// MapHelper.getPolygonGeometry(x, y, 100);

		return "SELECT PK_UID ID,"
				+ subLayer.getTitleField()
				+ " NAME,"
				+ subLayer.getSubTitleField()
				+ " SUBNAME,ST_AsText(Geometry) GEOMETRY ,ST_AsText(ST_Centroid(Geometry)) CENTROID from "
				+ subLayer.getTableName()
				+ " t WHERE ST_Intersects(t.Geometry,"
				+ MapHelper.getPolygonGeometry(x, y, 100)
				+ ")=1 AND ST_Intersects(t.Geometry,ST_Buffer(ST_GeometryFromText('POINT("
				+ x + " " + y + ")',2437),100))=1";
	}

	/**
	 * 组合sql语句
	 * 
	 * @param subLayer
	 * @return
	 */
	public String toSql1(SubLayer subLayer, double x, double y) {

		// MapHelper.getPolygonGeometry(x, y, 100);

		return "SELECT PK_UID ID,"
				+ subLayer.getTitleField()
				+ " NAME,"
				+ subLayer.getSubTitleField()
				+ " SUBNAME,ST_AsText(Geometry) GEOMETRY ,ST_AsText(ST_Centroid(Geometry)) CENTROID from "
				+ subLayer.getTableName()
				+ " t WHERE ST_Intersects(t.Geometry,"
				+ MapHelper.getPolygonGeometry(x, y, 100)
				+ ")=1 AND ST_Intersects(t.Geometry,ST_Buffer(ST_GeometryFromText('POINT("
				+ x + " " + y + ")',2437),100))=1";
	}

	class getRimAsyncTask extends AsyncTask<String, Void, List<AddressBean>> {
		ProgressDialog pdialog;

		@Override
		protected List<AddressBean> doInBackground(String... params) {
			// TODO Auto-generated method stub
			// getRimData(params[0]);
			return getRimData(params[0], params[1]);
		}

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
			pdialog = new ProgressDialog(mContext);
			pdialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
			pdialog.setMessage("正在查询...");
			pdialog.show();
		}

		@Override
		protected void onPostExecute(List<AddressBean> result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			// rimList = result;
			// rimGraphicsLayer.removeAll();
			ToastUtil.makeToastInBottom("查询到--" + result.size() + "--个数据");
			if (result != null && result.size() != 0) {
				Point cenPoint = null;
				Graphic graphic = null;
				rimGraphicsLayer.removeAll();
				for (int i = 0; i < result.size(); i++) {
					String centerPoint = result.get(i).getCentroid();
					String string = centerPoint.replaceFirst("POINT", "")
							.replaceAll("\\(", "").replaceAll("\\)", "");
					String[] pointStringArray = string.split(" ");
					cenPoint = new Point(
							StringUtil.String2Double(pointStringArray[0]),
							StringUtil.String2Double(pointStringArray[1]));

					graphic = new Graphic(cenPoint,
							new SymbolUtil(mContext)
									.getPolygonCenterPointSymbol());

					addPolygonToGraphicsLayer(result.get(i), rimGraphicsLayer,
							false);
					// rimGraphicsLayer.addGraphic(graphic);
				}

				if (titleBeans.size() > 0) {

					popRightTitleManager.init(titleBeans);
					int[] location = new int[2];

					Constants.ll_right_menu.getLocationOnScreen(location);

					popRightTitleManager.getPopupWindow().showAtLocation(
							Constants.ll_right_menu,
							Gravity.NO_GRAVITY,
							location[0]
									- popRightTitleManager.getPopupWindow()
											.getWidth() + 70, location[1]);

				}

			} else {
				ToastUtil.makeToastInBottom("没有匹配的数据");
			}

			if (pdialog.isShowing()) {
				pdialog.dismiss();
			}

		}

	}

	/**
	 * 将面绘制到图层上
	 * 
	 * @param addressBean
	 * @param graphicsLayer
	 * @param isLocation
	 */
	public void addPolygonToGraphicsLayer(AddressBean addressBean,

	GraphicsLayer graphicsLayer, boolean isLocation) {

		String polygonString = addressBean.getGeometry();
		if (polygonString == null || polygonString.equalsIgnoreCase(""))
			return;
		if (graphicsLayer == null) {
			graphicsLayer = new GraphicsLayer();
			mapView.addLayer(graphicsLayer);
		}
		String multiplygonString = polygonString
				.replaceFirst("MULTIPOLYGON", "").replaceAll("\\(\\(\\(", "")
				.replaceAll("\\)\\)\\)", "");
		// LogUtil.LoLoLog().e(multiplygonString);

		String[] multiplygon = multiplygonString.trim().split("\\)\\), \\(\\(");
		Graphic graphic = null;
		Map<String, Object> map = null;
		Polygon polygon = null;
		List<Geometry> geometries = new ArrayList<Geometry>();
		for (String string : multiplygon) {
			String[] pointStringArray = string.split(",");
			polygon = new Polygon();

			for (int index = 0; index < pointStringArray.length; index++) {
				String pointString = pointStringArray[index];

				String[] point = pointString.trim().split(" ");
				if (0 == index) {

					polygon.startPath(Double.parseDouble(point[0]),
							Double.parseDouble(point[1]));
				} else {
					try {
						polygon.lineTo(Double.parseDouble(point[0]),
								Double.parseDouble(point[1]));
					} catch (NumberFormatException e) {
						// TODO: handle exception
						LogUtil.LoLoLog().d(
								"id:" + addressBean.getId() + "----  name:"
										+ addressBean.getName());
					}

				}
				// polygon.setXY(index, Double.parseDouble(point[0]),
				// Double.parseDouble(point[1]));
			}

			geometries.add(polygon);
			map = new HashMap<String, Object>();
			map.put("ID", addressBean.getId());
			map.put("NAME", addressBean.getName());
			map.put("TABLENAME", addressBean.getTableName());
			map.put("CENTROID", addressBean.getCentroid());
			graphic = new Graphic(polygon,
					new SymbolUtil(mContext).getPolygonAllSymbol1(), map, null);
			// graphicsLayer.addGraphic(graphic);

			// MapHelper.flashGeometrys(mapView, geometries, graphicsLayer,
			// false);

		}

	}

	/**
	 * 显示气泡
	 * 
	 * @param mapView
	 * @param addressBean
	 */
	private void showCalloutView(MapView mapView, final AddressBean addressBean) {
		String centerPoint = addressBean.getCentroid();
		String string = centerPoint.replaceFirst("POINT", "")
				.replaceAll("\\(", "").replaceAll("\\)", "");
		String[] pointStringArray = string.split(" ");
		Point mapPoint = new Point(
				StringUtil.String2Double(pointStringArray[0]),
				StringUtil.String2Double(pointStringArray[1]));

		final Callout callout = mapView.getCallout();

		// callout.setOffset(0, 10);
		CalloutStyle style = new CalloutStyle();
		style.setAnchor(5);
		style.setBackgroundColor(Color.parseColor("#FFFFFF"));
		// style.setBackgroundAlpha(10);
		style.setCornerCurve(1);
		// style.setFrameColor(R.color.tra);
		callout.setStyle(style);
		View view1 = LayoutInflater.from(mContext).inflate(
				R.layout.layout_callout, null);
		callout.setContent(view1);
		// Button btn_callout_modify = (Button) view1
		// .findViewById(R.id.btn_callout_modify);

		TextView txt = (TextView) view1.findViewById(R.id.txt_callout);
		Button btn_callout_go = (Button) view1
				.findViewById(R.id.btn_callout_go);

		txt.setText(addressBean.getName());
		if (!callout.isShowing()) {
			// mapView.setOnStatusChangedListener(onStatusChangedListener);
			mapView.zoomToScale(mapPoint, 13000);
			callout.setCoordinates(mapPoint);
			callout.show();
		} else {
			mapView.zoomToScale(mapPoint, 13000);
			callout.move(mapPoint);
		}

		btn_callout_go.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				callout.hide();
				if (null != popGestureManager.getPopupWindow()) {
					popGestureManager.getPopupWindow().dismiss();
					popGestureManager.setPopupWindow(null);
					return;
				} else {
					popGestureManager.init(addressBean);
					int[] location = new int[2];

					Constants.ll_right_menu.getLocationOnScreen(location);

					popGestureManager.getPopupWindow().showAtLocation(
							Constants.ll_right_menu,
							Gravity.NO_GRAVITY,
							location[0]
									- popGestureManager.getPopupWindow()
											.getWidth() + 70, location[1]);

				}
			}

		});

	}

	/**
	 * 左侧导航初始化
	 * 
	 * @param modules
	 */
	private void initLeftMenuView(final List<Module> modules, int press) {
		// TODO Auto-generated method stub
		ll_main_menu_left_content.removeAllViews();
		if (modules == null || modules.size() == 0)
			return;
		for (int i = 0; i < modules.size(); i++) {
			final int index = i;
			final Button button_nomal = new Button(mContext);
			button_nomal.setBackgroundResource(getRidByName(modules.get(index)
					.getImg_nomal()));

			final Button button_press = new Button(mContext);
			button_press.setBackgroundResource(getRidByName(modules.get(index)
					.getImg_press()));

			if (press == index) {
				button_press.setVisibility(View.VISIBLE);
				button_nomal.setVisibility(View.GONE);
				// button_press.setText(modules.get(i).getTitle());
				button_press.setLayoutParams(new LinearLayout.LayoutParams(
						LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
				button_press.setGravity(Gravity.CENTER);
				button_press.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View v) {
						// TODO Auto-generated method stub
						initLeftMenuView(modules, index);
						// ToastUtil.makeToastInBottom(index + "");
						// 这里是位置显示方式,在按钮的左下角
						showPopWindow(button_nomal, index);

					}
				});
			} else {
				button_nomal.setVisibility(View.VISIBLE);
				button_press.setVisibility(View.GONE);
				// button_nomal.setText(modules.get(i).getTitle());
				button_nomal.setLayoutParams(new LinearLayout.LayoutParams(
						LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
				button_nomal.setGravity(Gravity.CENTER);
				button_nomal.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View v) {
						// TODO Auto-generated method stub
						initLeftMenuView(modules, index);
						// ToastUtil.makeToastInBottom(index + "");
						showPopWindow(button_nomal, index);
					}
				});
			}

			ll_main_menu_left_content.addView(button_nomal);
			ll_main_menu_left_content.addView(button_press);

		}

	}

	/**
	 * 显示pop
	 * 
	 * @param view
	 * @param index
	 */

	void showPopWindow(View view, int index) {

		switch (index) {
		case 0:
			ll_web.setVisibility(View.GONE);

			ll_main_list_left
					.setVisibility(ll_main_list_left.getVisibility() != View.VISIBLE ? View.VISIBLE
							: View.GONE);

			if (ll_main_list_left.getVisibility() == View.VISIBLE) {
				if (!isFirst) {
					isFirst = true;
					mainLeftListView.initView();
				}
				rl_main_scale.setVisibility(View.GONE);

			} else {
				rl_main_scale.setVisibility(View.VISIBLE);
			}
			break;

		case 1:
			ll_main_list_left.setVisibility(View.GONE);

			ll_web.setVisibility(ll_main_list_left.getVisibility() != View.VISIBLE ? View.VISIBLE
					: View.GONE);

			if (ll_web.getVisibility() == View.VISIBLE) {
				if (!isWebFirst) {
					isWebFirst = true;
					mainWebView.initView();
				}

			} else {
				rl_main_scale.setVisibility(View.VISIBLE);
			}

			break;

		case 2:

			break;

		case 3:

			break;

		default:
			break;
		}

	}

	protected int getRidByName(String name) {
		Class drawable = R.drawable.class;
		Field field = null;
		try {
			field = drawable.getField(name);
			int r_id = field.getInt(field.getName());
			return r_id;
		} catch (Exception e) {
			Log.e("ERROR", "PICTURE NOT　FOUND!");
		}
		return 0;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.android.smartmobile.cz.interf.InitActivity#clearView()
	 */
	@Override
	public void clearView() {
		// TODO Auto-generated method stub
		List<PopupWindow> list = MyApplication.mApp.popupWindows;
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				PopupWindow popupWindow = list.get(i);
				if (popupWindow != null && popupWindow.isShowing()) {
					popupWindow.dismiss();
					popupWindow = null;
				}
			}
		}
	}

	@Override
	protected void onPause() {
		super.onPause();
		mapView.pause();
	}

}
